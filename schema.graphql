type NodeIdCounter @entity {
  id: ID!
  current: BigInt!
}

type User @entity {
  id: ID!
  addresses: [UserAddress!]! @derivedFrom(field: "user")
}

type UserAddress @entity {
  id: ID!
  name: String!
  address: Bytes!
  user: User!
}

type Issue @entity {
  id: ID!
  deposits: [IssueDeposit!]! @derivedFrom(field: "issue")
}

type IssueDeposit @entity {
  id: ID!
  from: Bytes!
  amount: BigInt!
  issue: Issue!
}

type Oracle @entity {
  id: ID!
  name: String!
  ethAddress: Bytes!
  jobs: [OracleJob!]! @derivedFrom(field: "oracle")
}

type OracleJob @entity {
  id: ID!
  name: String!
  fee: BigInt!
  oracle: Oracle!
}

type GovernanceDepartment @entity {
  id: ID!
  projectId: String!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  minQuorum: Int!
  requiredSharesToCreateProposals: Int!
  holders: [GovernanceTokenHolder!] @derivedFrom(field: "department")
  nfts: [GovernancePermissionNFT!] @derivedFrom(field: "department")
  proposals: [GovernanceProposal!] @derivedFrom(field: "department")
}

type GovernanceTokenHolder @entity {
  id: ID!
  githubUserId: String!
  ethAddress: Bytes!
  balance: BigInt!
  department: GovernanceDepartment!
}

type GovernancePermissionNFT @entity {
  id: ID!
  ownerAddress: Bytes!
  permissions: [String!]!
  department: GovernanceDepartment!
}

type GovernanceProposal @entity {
  id: ID!
  quorum: Int!
  discussionId: String!
  startDate: BigInt!
  endDate: BigInt!
  votes: [GovernanceProposalVote!] @derivedFrom(field: "proposal")
  department: GovernanceDepartment!
}

type GovernanceProposalVote @entity {
  id: ID!
  holder: GovernanceTokenHolder!
  percentage: Int!
  proposal: GovernanceProposal!
}